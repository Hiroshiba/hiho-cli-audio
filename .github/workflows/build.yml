name: Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: "バージョン情報（例: 1.0.0）"
        required: true

defaults:
  run:
    shell: bash

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: win
          - os: macos-latest
            name: mac
          - os: ubuntu-latest
            name: linux
            container: electronuserland/builder

    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: <Setup> リポジトリのチェックアウト
        uses: actions/checkout@v4

      - name: <Setup> pnpmの設定
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: <Setup> Node.jsとpnpmキャッシュの設定
        uses: actions/setup-node@v4
        with:
          node-version-file: ".node-version"
          cache: "pnpm"

      - name: <Setup> 依存関係のインストール
        run: pnpm install

      - name: <Setup> package.jsonのバージョン更新
        run: npm version ${{ github.event.inputs.version }} --no-git-tag-version

      - name: <Build> TypeScript型チェック
        run: pnpm typecheck

      - name: <Build> ESLintの実行
        run: pnpm lint

      - name: <Build> Electronアプリケーションのビルド
        run: pnpm run build

      # 複数プラットフォームが並行でGitHub Releasesに同時アップロードを試みるため、
      # 競合やAPI制限により失敗する可能性がある。リトライ機構で信頼性を向上させる。
      - name: <Deploy> GitHub Releasesへの公開（リトライ付き）
        run: |
          max_attempts=3
          for attempt in $(seq 1 $max_attempts); do
            echo "公開試行 $attempt/$max_attempts"
            if pnpm run publish:${{ matrix.name }}; then
              echo "✅ 公開成功"
              exit 0
            else
              echo "❌ 公開失敗 (試行 $attempt/$max_attempts)"
              if [ $attempt -lt $max_attempts ]; then
                wait_time=$((attempt * 15))
                echo "⏳ ${wait_time}秒待機してリトライ..."
                sleep $wait_time
              fi
            fi
          done
          echo "💥 最大試行回数に達しました。公開に失敗しました。"
          exit 1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
